# WebP Safe Migrator - Enhanced WordPress Development Container with Nginx
# Based on official WordPress image with Nginx instead of Apache

ARG WORDPRESS_VERSION=latest
ARG PHP_VERSION=8.2

FROM wordpress:${WORDPRESS_VERSION} as wordpress-source

# Use PHP-FPM base image
FROM php:${PHP_VERSION}-fpm

# Copy WordPress files from official image
COPY --from=wordpress-source /usr/src/wordpress /usr/src/wordpress
COPY --from=wordpress-source /usr/local/bin/docker-entrypoint.sh /usr/local/bin/wordpress-entrypoint.sh

# Install system packages
RUN apt-get update && apt-get install -y \
    # Nginx web server
    nginx \
    # SSL/TLS support
    openssl \
    ca-certificates \
    # Image processing libraries
    libwebp-dev \
    libavif-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    # Additional utilities
    wget \
    curl \
    unzip \
    git \
    nano \
    # Certbot for SSL certificates
    certbot \
    python3-certbot-nginx \
    # Performance monitoring
    htop \
    # Network utilities
    net-tools \
    iputils-ping \
    # Process management
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Configure PHP extensions for optimal image handling
RUN docker-php-ext-configure gd \
    --with-freetype \
    --with-jpeg \
    --with-webp \
    && docker-php-ext-install -j$(nproc) \
    gd \
    exif \
    bcmath \
    opcache \
    mysqli \
    pdo_mysql

# Install additional PHP extensions
RUN pecl install \
    redis \
    imagick \
    && docker-php-ext-enable \
    redis \
    imagick

# Optimize PHP configuration for WordPress and image processing
RUN { \
    echo 'memory_limit = 512M'; \
    echo 'upload_max_filesize = 100M'; \
    echo 'post_max_size = 100M'; \
    echo 'max_execution_time = 300'; \
    echo 'max_input_time = 300'; \
    echo 'max_input_vars = 3000'; \
    echo 'file_uploads = On'; \
    echo 'allow_url_fopen = On'; \
    echo 'display_errors = On'; \
    echo 'log_errors = On'; \
    echo 'error_log = /var/log/php_errors.log'; \
    echo 'date.timezone = UTC'; \
    echo ''; \
    echo '; OpCache optimization'; \
    echo 'opcache.enable = 1'; \
    echo 'opcache.memory_consumption = 128'; \
    echo 'opcache.interned_strings_buffer = 8'; \
    echo 'opcache.max_accelerated_files = 4000'; \
    echo 'opcache.revalidate_freq = 2'; \
    echo 'opcache.fast_shutdown = 1'; \
    echo ''; \
    echo '; Image processing optimization'; \
    echo 'gd.jpeg_ignore_warning = 1'; \
} > /usr/local/etc/php/conf.d/webp-migrator.ini

# Configure PHP-FPM
RUN { \
    echo '[global]'; \
    echo 'error_log = /var/log/php-fpm.log'; \
    echo 'log_level = warning'; \
    echo ''; \
    echo '[www]'; \
    echo 'user = www-data'; \
    echo 'group = www-data'; \
    echo 'listen = 127.0.0.1:9000'; \
    echo 'listen.owner = www-data'; \
    echo 'listen.group = www-data'; \
    echo 'pm = dynamic'; \
    echo 'pm.max_children = 50'; \
    echo 'pm.start_servers = 5'; \
    echo 'pm.min_spare_servers = 5'; \
    echo 'pm.max_spare_servers = 35'; \
    echo 'pm.max_requests = 500'; \
    echo 'clear_env = no'; \
} > /usr/local/etc/php-fpm.d/webp-migrator.conf

# Create SSL certificate directory
RUN mkdir -p /etc/ssl/certs/webp-migrator

# Copy Nginx configuration
COPY nginx-ssl.conf /etc/nginx/sites-available/webp-migrator
COPY nginx.conf /etc/nginx/nginx.conf

# Enable site and remove default
RUN ln -s /etc/nginx/sites-available/webp-migrator /etc/nginx/sites-enabled/ && \
    rm -f /etc/nginx/sites-enabled/default

# Copy supervisor configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy custom entrypoint
COPY docker-entrypoint-nginx.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint-nginx.sh

# Create log directories
RUN mkdir -p /var/log/webp-migrator /var/log/nginx && \
    chown www-data:www-data /var/log/webp-migrator && \
    touch /var/log/php-fpm.log && \
    chown www-data:www-data /var/log/php-fpm.log

# Set working directory
WORKDIR /var/www/html

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Use custom entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint-nginx.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
