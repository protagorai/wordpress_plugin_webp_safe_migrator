Short answer: yes, it’s absolutely doable—but you’ll want to do it carefully. The main challenges are:

Converting originals and all registered image sizes to WebP at a chosen quality.

Updating attachment metadata (_wp_attachment_metadata, _wp_attached_file, post_mime_type, guid) so WordPress “thinks” the asset is WebP.

Finding and replacing every usage (posts, pages, custom post types, widgets, options, custom fields) without corrupting serialized data.

Providing a two-phase “validate → commit” flow so you can preview that everything points to the new WebP before deleting the legacy files.

Below is a practical plan and a working plugin you can drop in and iterate on.

Plan / Approach

Scan non-WebP attachments
Query attachments with post_mime_type in image/jpeg, image/png, image/gif (skip animated GIFs unless you handle animated WebP).

Convert originals and sizes → WebP
Use wp_get_image_editor() (GD or Imagick) and save to *.webp at a configurable quality (defaults to 59).
Regenerate sizes by calling wp_generate_attachment_metadata( $id, $webp_path ).

Build a URL map for each attachment
Map every old URL → new URL, including the original and all size variants:
.../image.jpg → .../image.webp
.../image-300x200.jpg → .../image-300x200.webp

Update the attachment itself

post_mime_type → image/webp

guid → new WebP URL (acceptable for attachments)

_wp_attached_file → new relative WebP path

_wp_attachment_metadata → the freshly generated metadata for the WebP tree
Store a migration status in postmeta (e.g., _webp_migrator_status) so you can track progress.

Replace usages safely (validation phase)

Posts/pages: search post_content for old URLs and replace with mapped WebP URLs.

Postmeta / options: load values, maybe_unserialize, recursively replace strings inside arrays/objects, then re-serialize with maybe_serialize. This avoids breaking serialized strings.

Record where replacements occurred (post IDs, meta keys, options) for the validation report.

Validation UI
Show per-image report: preview thumbnail, list of replacements found & updated, and a “commit delete” button. Until you commit, keep the original files (or move them to a backup folder).

Commit
If validation looks good, delete/move legacy files (original + sizes). Optionally keep a backup directory (/uploads/webp-migrator-backup/<timestamp>/...) for rollback.

CLI support (optional)
Add a WP-CLI command for big libraries.

Performance
Process in batches. Offer a “resume” capability by remembering the last processed attachment ID and by marking attachments with a status.